// Code generated by mockery v2.45.1. DO NOT EDIT.

package promptservice

import (
	entity "chatgpt-challenge/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockPromptRepo is an autogenerated mock type for the PromptRepo type
type MockPromptRepo struct {
	mock.Mock
}

type MockPromptRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPromptRepo) EXPECT() *MockPromptRepo_Expecter {
	return &MockPromptRepo_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields:
func (_m *MockPromptRepo) GetAll() []entity.Prompt {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.Prompt
	if rf, ok := ret.Get(0).(func() []entity.Prompt); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Prompt)
		}
	}

	return r0
}

// MockPromptRepo_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockPromptRepo_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockPromptRepo_Expecter) GetAll() *MockPromptRepo_GetAll_Call {
	return &MockPromptRepo_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockPromptRepo_GetAll_Call) Run(run func()) *MockPromptRepo_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPromptRepo_GetAll_Call) Return(_a0 []entity.Prompt) *MockPromptRepo_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptRepo_GetAll_Call) RunAndReturn(run func() []entity.Prompt) *MockPromptRepo_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// SetNX provides a mock function with given fields: _a0
func (_m *MockPromptRepo) SetNX(_a0 entity.Prompt) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetNX")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(entity.Prompt) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPromptRepo_SetNX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNX'
type MockPromptRepo_SetNX_Call struct {
	*mock.Call
}

// SetNX is a helper method to define mock.On call
//   - _a0 entity.Prompt
func (_e *MockPromptRepo_Expecter) SetNX(_a0 interface{}) *MockPromptRepo_SetNX_Call {
	return &MockPromptRepo_SetNX_Call{Call: _e.mock.On("SetNX", _a0)}
}

func (_c *MockPromptRepo_SetNX_Call) Run(run func(_a0 entity.Prompt)) *MockPromptRepo_SetNX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Prompt))
	})
	return _c
}

func (_c *MockPromptRepo_SetNX_Call) Return(_a0 bool) *MockPromptRepo_SetNX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptRepo_SetNX_Call) RunAndReturn(run func(entity.Prompt) bool) *MockPromptRepo_SetNX_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateErrorMessage provides a mock function with given fields: id, errMessage
func (_m *MockPromptRepo) UpdateErrorMessage(id string, errMessage string) error {
	ret := _m.Called(id, errMessage)

	if len(ret) == 0 {
		panic("no return value specified for UpdateErrorMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, errMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptRepo_UpdateErrorMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateErrorMessage'
type MockPromptRepo_UpdateErrorMessage_Call struct {
	*mock.Call
}

// UpdateErrorMessage is a helper method to define mock.On call
//   - id string
//   - errMessage string
func (_e *MockPromptRepo_Expecter) UpdateErrorMessage(id interface{}, errMessage interface{}) *MockPromptRepo_UpdateErrorMessage_Call {
	return &MockPromptRepo_UpdateErrorMessage_Call{Call: _e.mock.On("UpdateErrorMessage", id, errMessage)}
}

func (_c *MockPromptRepo_UpdateErrorMessage_Call) Run(run func(id string, errMessage string)) *MockPromptRepo_UpdateErrorMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockPromptRepo_UpdateErrorMessage_Call) Return(_a0 error) *MockPromptRepo_UpdateErrorMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptRepo_UpdateErrorMessage_Call) RunAndReturn(run func(string, string) error) *MockPromptRepo_UpdateErrorMessage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: _a0, _a1
func (_m *MockPromptRepo) UpdateStatus(_a0 string, _a1 entity.PromptStatus) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entity.PromptStatus) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptRepo_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockPromptRepo_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - _a0 string
//   - _a1 entity.PromptStatus
func (_e *MockPromptRepo_Expecter) UpdateStatus(_a0 interface{}, _a1 interface{}) *MockPromptRepo_UpdateStatus_Call {
	return &MockPromptRepo_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", _a0, _a1)}
}

func (_c *MockPromptRepo_UpdateStatus_Call) Run(run func(_a0 string, _a1 entity.PromptStatus)) *MockPromptRepo_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(entity.PromptStatus))
	})
	return _c
}

func (_c *MockPromptRepo_UpdateStatus_Call) Return(_a0 error) *MockPromptRepo_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptRepo_UpdateStatus_Call) RunAndReturn(run func(string, entity.PromptStatus) error) *MockPromptRepo_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPromptRepo creates a new instance of MockPromptRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPromptRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPromptRepo {
	mock := &MockPromptRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
