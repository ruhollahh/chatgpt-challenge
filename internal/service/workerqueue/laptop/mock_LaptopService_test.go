// Code generated by mockery v2.45.1. DO NOT EDIT.

package laptopworkerqueue

import (
	laptopparam "chatgpt-challenge/internal/param/laptop"

	mock "github.com/stretchr/testify/mock"
)

// MockLaptopService is an autogenerated mock type for the LaptopService type
type MockLaptopService struct {
	mock.Mock
}

type MockLaptopService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLaptopService) EXPECT() *MockLaptopService_Expecter {
	return &MockLaptopService_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: request
func (_m *MockLaptopService) Insert(request laptopparam.InsertRequest) {
	_m.Called(request)
}

// MockLaptopService_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockLaptopService_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - request laptopparam.InsertRequest
func (_e *MockLaptopService_Expecter) Insert(request interface{}) *MockLaptopService_Insert_Call {
	return &MockLaptopService_Insert_Call{Call: _e.mock.On("Insert", request)}
}

func (_c *MockLaptopService_Insert_Call) Run(run func(request laptopparam.InsertRequest)) *MockLaptopService_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(laptopparam.InsertRequest))
	})
	return _c
}

func (_c *MockLaptopService_Insert_Call) Return() *MockLaptopService_Insert_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLaptopService_Insert_Call) RunAndReturn(run func(laptopparam.InsertRequest)) *MockLaptopService_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Structify provides a mock function with given fields: _a0
func (_m *MockLaptopService) Structify(_a0 laptopparam.StructifyRequest) (laptopparam.StructifyResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Structify")
	}

	var r0 laptopparam.StructifyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(laptopparam.StructifyRequest) (laptopparam.StructifyResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(laptopparam.StructifyRequest) laptopparam.StructifyResponse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(laptopparam.StructifyResponse)
	}

	if rf, ok := ret.Get(1).(func(laptopparam.StructifyRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLaptopService_Structify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Structify'
type MockLaptopService_Structify_Call struct {
	*mock.Call
}

// Structify is a helper method to define mock.On call
//   - _a0 laptopparam.StructifyRequest
func (_e *MockLaptopService_Expecter) Structify(_a0 interface{}) *MockLaptopService_Structify_Call {
	return &MockLaptopService_Structify_Call{Call: _e.mock.On("Structify", _a0)}
}

func (_c *MockLaptopService_Structify_Call) Run(run func(_a0 laptopparam.StructifyRequest)) *MockLaptopService_Structify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(laptopparam.StructifyRequest))
	})
	return _c
}

func (_c *MockLaptopService_Structify_Call) Return(_a0 laptopparam.StructifyResponse, _a1 error) *MockLaptopService_Structify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLaptopService_Structify_Call) RunAndReturn(run func(laptopparam.StructifyRequest) (laptopparam.StructifyResponse, error)) *MockLaptopService_Structify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLaptopService creates a new instance of MockLaptopService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLaptopService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLaptopService {
	mock := &MockLaptopService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
