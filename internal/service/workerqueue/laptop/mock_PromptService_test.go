// Code generated by mockery v2.45.1. DO NOT EDIT.

package laptopworkerqueue

import (
	promptparam "chatgpt-challenge/internal/param/prompt"

	mock "github.com/stretchr/testify/mock"
)

// MockPromptService is an autogenerated mock type for the PromptService type
type MockPromptService struct {
	mock.Mock
}

type MockPromptService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPromptService) EXPECT() *MockPromptService_Expecter {
	return &MockPromptService_Expecter{mock: &_m.Mock}
}

// InsertIfNotExist provides a mock function with given fields: req
func (_m *MockPromptService) InsertIfNotExist(req promptparam.InsertIfNotExistRequest) promptparam.InsertIfNotExistResponse {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for InsertIfNotExist")
	}

	var r0 promptparam.InsertIfNotExistResponse
	if rf, ok := ret.Get(0).(func(promptparam.InsertIfNotExistRequest) promptparam.InsertIfNotExistResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(promptparam.InsertIfNotExistResponse)
	}

	return r0
}

// MockPromptService_InsertIfNotExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertIfNotExist'
type MockPromptService_InsertIfNotExist_Call struct {
	*mock.Call
}

// InsertIfNotExist is a helper method to define mock.On call
//   - req promptparam.InsertIfNotExistRequest
func (_e *MockPromptService_Expecter) InsertIfNotExist(req interface{}) *MockPromptService_InsertIfNotExist_Call {
	return &MockPromptService_InsertIfNotExist_Call{Call: _e.mock.On("InsertIfNotExist", req)}
}

func (_c *MockPromptService_InsertIfNotExist_Call) Run(run func(req promptparam.InsertIfNotExistRequest)) *MockPromptService_InsertIfNotExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(promptparam.InsertIfNotExistRequest))
	})
	return _c
}

func (_c *MockPromptService_InsertIfNotExist_Call) Return(_a0 promptparam.InsertIfNotExistResponse) *MockPromptService_InsertIfNotExist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptService_InsertIfNotExist_Call) RunAndReturn(run func(promptparam.InsertIfNotExistRequest) promptparam.InsertIfNotExistResponse) *MockPromptService_InsertIfNotExist_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFailure provides a mock function with given fields: req
func (_m *MockPromptService) UpdateFailure(req promptparam.UpdateFailureRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFailure")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(promptparam.UpdateFailureRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptService_UpdateFailure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFailure'
type MockPromptService_UpdateFailure_Call struct {
	*mock.Call
}

// UpdateFailure is a helper method to define mock.On call
//   - req promptparam.UpdateFailureRequest
func (_e *MockPromptService_Expecter) UpdateFailure(req interface{}) *MockPromptService_UpdateFailure_Call {
	return &MockPromptService_UpdateFailure_Call{Call: _e.mock.On("UpdateFailure", req)}
}

func (_c *MockPromptService_UpdateFailure_Call) Run(run func(req promptparam.UpdateFailureRequest)) *MockPromptService_UpdateFailure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(promptparam.UpdateFailureRequest))
	})
	return _c
}

func (_c *MockPromptService_UpdateFailure_Call) Return(_a0 error) *MockPromptService_UpdateFailure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptService_UpdateFailure_Call) RunAndReturn(run func(promptparam.UpdateFailureRequest) error) *MockPromptService_UpdateFailure_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProcessed provides a mock function with given fields: req
func (_m *MockPromptService) UpdateProcessed(req promptparam.UpdateProcessedRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProcessed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(promptparam.UpdateProcessedRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptService_UpdateProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProcessed'
type MockPromptService_UpdateProcessed_Call struct {
	*mock.Call
}

// UpdateProcessed is a helper method to define mock.On call
//   - req promptparam.UpdateProcessedRequest
func (_e *MockPromptService_Expecter) UpdateProcessed(req interface{}) *MockPromptService_UpdateProcessed_Call {
	return &MockPromptService_UpdateProcessed_Call{Call: _e.mock.On("UpdateProcessed", req)}
}

func (_c *MockPromptService_UpdateProcessed_Call) Run(run func(req promptparam.UpdateProcessedRequest)) *MockPromptService_UpdateProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(promptparam.UpdateProcessedRequest))
	})
	return _c
}

func (_c *MockPromptService_UpdateProcessed_Call) Return(_a0 error) *MockPromptService_UpdateProcessed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptService_UpdateProcessed_Call) RunAndReturn(run func(promptparam.UpdateProcessedRequest) error) *MockPromptService_UpdateProcessed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPromptService creates a new instance of MockPromptService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPromptService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPromptService {
	mock := &MockPromptService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
