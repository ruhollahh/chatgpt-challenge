// Code generated by mockery v2.45.1. DO NOT EDIT.

package laptopservice

import (
	entity "chatgpt-challenge/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockLaptopRepo is an autogenerated mock type for the LaptopRepo type
type MockLaptopRepo struct {
	mock.Mock
}

type MockLaptopRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLaptopRepo) EXPECT() *MockLaptopRepo_Expecter {
	return &MockLaptopRepo_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields:
func (_m *MockLaptopRepo) GetAll() []entity.Laptop {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.Laptop
	if rf, ok := ret.Get(0).(func() []entity.Laptop); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Laptop)
		}
	}

	return r0
}

// MockLaptopRepo_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockLaptopRepo_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockLaptopRepo_Expecter) GetAll() *MockLaptopRepo_GetAll_Call {
	return &MockLaptopRepo_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockLaptopRepo_GetAll_Call) Run(run func()) *MockLaptopRepo_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLaptopRepo_GetAll_Call) Return(_a0 []entity.Laptop) *MockLaptopRepo_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLaptopRepo_GetAll_Call) RunAndReturn(run func() []entity.Laptop) *MockLaptopRepo_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: promptID, laptop
func (_m *MockLaptopRepo) Set(promptID string, laptop entity.Laptop) {
	_m.Called(promptID, laptop)
}

// MockLaptopRepo_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockLaptopRepo_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - promptID string
//   - laptop entity.Laptop
func (_e *MockLaptopRepo_Expecter) Set(promptID interface{}, laptop interface{}) *MockLaptopRepo_Set_Call {
	return &MockLaptopRepo_Set_Call{Call: _e.mock.On("Set", promptID, laptop)}
}

func (_c *MockLaptopRepo_Set_Call) Run(run func(promptID string, laptop entity.Laptop)) *MockLaptopRepo_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(entity.Laptop))
	})
	return _c
}

func (_c *MockLaptopRepo_Set_Call) Return() *MockLaptopRepo_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLaptopRepo_Set_Call) RunAndReturn(run func(string, entity.Laptop)) *MockLaptopRepo_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLaptopRepo creates a new instance of MockLaptopRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLaptopRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLaptopRepo {
	mock := &MockLaptopRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
