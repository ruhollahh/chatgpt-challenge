// Code generated by mockery v2.45.1. DO NOT EDIT.

package laptopservice

import (
	entity "chatgpt-challenge/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockLaptopSchema is an autogenerated mock type for the LaptopSchema type
type MockLaptopSchema struct {
	mock.Mock
}

type MockLaptopSchema_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLaptopSchema) EXPECT() *MockLaptopSchema_Expecter {
	return &MockLaptopSchema_Expecter{mock: &_m.Mock}
}

// Description provides a mock function with given fields:
func (_m *MockLaptopSchema) Description() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockLaptopSchema_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type MockLaptopSchema_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *MockLaptopSchema_Expecter) Description() *MockLaptopSchema_Description_Call {
	return &MockLaptopSchema_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *MockLaptopSchema_Description_Call) Run(run func()) *MockLaptopSchema_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLaptopSchema_Description_Call) Return(_a0 string) *MockLaptopSchema_Description_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLaptopSchema_Description_Call) RunAndReturn(run func() string) *MockLaptopSchema_Description_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalJSON provides a mock function with given fields:
func (_m *MockLaptopSchema) MarshalJSON() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLaptopSchema_MarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalJSON'
type MockLaptopSchema_MarshalJSON_Call struct {
	*mock.Call
}

// MarshalJSON is a helper method to define mock.On call
func (_e *MockLaptopSchema_Expecter) MarshalJSON() *MockLaptopSchema_MarshalJSON_Call {
	return &MockLaptopSchema_MarshalJSON_Call{Call: _e.mock.On("MarshalJSON")}
}

func (_c *MockLaptopSchema_MarshalJSON_Call) Run(run func()) *MockLaptopSchema_MarshalJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLaptopSchema_MarshalJSON_Call) Return(_a0 []byte, _a1 error) *MockLaptopSchema_MarshalJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLaptopSchema_MarshalJSON_Call) RunAndReturn(run func() ([]byte, error)) *MockLaptopSchema_MarshalJSON_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockLaptopSchema) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockLaptopSchema_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockLaptopSchema_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockLaptopSchema_Expecter) Name() *MockLaptopSchema_Name_Call {
	return &MockLaptopSchema_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockLaptopSchema_Name_Call) Run(run func()) *MockLaptopSchema_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLaptopSchema_Name_Call) Return(_a0 string) *MockLaptopSchema_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLaptopSchema_Name_Call) RunAndReturn(run func() string) *MockLaptopSchema_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ParseContent provides a mock function with given fields: content
func (_m *MockLaptopSchema) ParseContent(content string) (entity.Laptop, error) {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for ParseContent")
	}

	var r0 entity.Laptop
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.Laptop, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(string) entity.Laptop); ok {
		r0 = rf(content)
	} else {
		r0 = ret.Get(0).(entity.Laptop)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLaptopSchema_ParseContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseContent'
type MockLaptopSchema_ParseContent_Call struct {
	*mock.Call
}

// ParseContent is a helper method to define mock.On call
//   - content string
func (_e *MockLaptopSchema_Expecter) ParseContent(content interface{}) *MockLaptopSchema_ParseContent_Call {
	return &MockLaptopSchema_ParseContent_Call{Call: _e.mock.On("ParseContent", content)}
}

func (_c *MockLaptopSchema_ParseContent_Call) Run(run func(content string)) *MockLaptopSchema_ParseContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLaptopSchema_ParseContent_Call) Return(_a0 entity.Laptop, _a1 error) *MockLaptopSchema_ParseContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLaptopSchema_ParseContent_Call) RunAndReturn(run func(string) (entity.Laptop, error)) *MockLaptopSchema_ParseContent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLaptopSchema creates a new instance of MockLaptopSchema. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLaptopSchema(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLaptopSchema {
	mock := &MockLaptopSchema{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
