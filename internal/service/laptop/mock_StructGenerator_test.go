// Code generated by mockery v2.45.1. DO NOT EDIT.

package laptopservice

import (
	openaiparam "chatgpt-challenge/internal/param/openai"

	mock "github.com/stretchr/testify/mock"
)

// MockStructGenerator is an autogenerated mock type for the StructGenerator type
type MockStructGenerator struct {
	mock.Mock
}

type MockStructGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStructGenerator) EXPECT() *MockStructGenerator_Expecter {
	return &MockStructGenerator_Expecter{mock: &_m.Mock}
}

// StructuredOutput provides a mock function with given fields: request
func (_m *MockStructGenerator) StructuredOutput(request openaiparam.StructuredOutputRequest) (openaiparam.StructuredOutputResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for StructuredOutput")
	}

	var r0 openaiparam.StructuredOutputResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(openaiparam.StructuredOutputRequest) (openaiparam.StructuredOutputResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(openaiparam.StructuredOutputRequest) openaiparam.StructuredOutputResponse); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(openaiparam.StructuredOutputResponse)
	}

	if rf, ok := ret.Get(1).(func(openaiparam.StructuredOutputRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStructGenerator_StructuredOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StructuredOutput'
type MockStructGenerator_StructuredOutput_Call struct {
	*mock.Call
}

// StructuredOutput is a helper method to define mock.On call
//   - request openaiparam.StructuredOutputRequest
func (_e *MockStructGenerator_Expecter) StructuredOutput(request interface{}) *MockStructGenerator_StructuredOutput_Call {
	return &MockStructGenerator_StructuredOutput_Call{Call: _e.mock.On("StructuredOutput", request)}
}

func (_c *MockStructGenerator_StructuredOutput_Call) Run(run func(request openaiparam.StructuredOutputRequest)) *MockStructGenerator_StructuredOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(openaiparam.StructuredOutputRequest))
	})
	return _c
}

func (_c *MockStructGenerator_StructuredOutput_Call) Return(_a0 openaiparam.StructuredOutputResponse, _a1 error) *MockStructGenerator_StructuredOutput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStructGenerator_StructuredOutput_Call) RunAndReturn(run func(openaiparam.StructuredOutputRequest) (openaiparam.StructuredOutputResponse, error)) *MockStructGenerator_StructuredOutput_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStructGenerator creates a new instance of MockStructGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStructGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStructGenerator {
	mock := &MockStructGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
